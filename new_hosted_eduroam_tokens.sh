#!/bin/bash

# Generates FreeRADIUS tokens, either as SQL INSERTs or flatfile format
# Usage:
#   ./new_hosted_eduroam_tokens.sh <realm> <count> [--as-users-file]

# This is a barely-optimized, AI-assisted bash translation of the original
# (human-written) New-HostedEduroamTokens.ps1 in case you don't like PowerShell
# Performance is significantly slower but still quite tolerable with 15k tokens

# Quick arg checking
if [[ $# -lt 2 ]] || [[ $# -gt 3 ]]; then
  echo "Usage: $0 <realm> <count> [--as-users-file]"
  exit 1
elif [[ $# -eq 3 ]] && [[ "$3" != "--as-users-file" ]]; then
  echo "Usage: $0 <realm> <count> [--as-users-file]"
  exit 1
fi

REALM="$1"
TOKEN_COUNT="$2"
AS_USERS_FILE="${3:-}"

if ! [[ "$TOKEN_COUNT" =~ ^[0-9]+$ ]] || (( TOKEN_COUNT < 1 || TOKEN_COUNT > 100000 )); then
  echo "count must be a number between 1 and 100000"
  exit 1
fi

# --- Fast hex-only token generator using hexdump ---
new_rand_string() {
  local hex token
  hex=$(hexdump -n 32 -e '32/1 "%02x"' /dev/urandom)
  token="${hex:0:6}-${hex:7:6}-${hex:15:6}-${hex:21:5}"
  echo "$token"
}

# --- Token Collection ---
declare -A tokens
retries=0
i=0

while (( i < TOKEN_COUNT )); do
  token="$(new_rand_string)"
  username="${token:0:6}"
  password="${token:14:12}"

  if [[ ! ${tokens[$username]+_} ]]; then
    tokens["$username"]="$password"
    ((i++)) # only increment on success
  else
    ((retries++))
  fi
done

# --- Output ---
timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
if [[ "$AS_USERS_FILE" == "--as-users-file" ]]; then
  echo "# Tokens generated by new_hosted_eduroam_tokens.sh on $timestamp"
  for user in "${!tokens[@]}"; do
    echo "${user}@${REALM} Cleartext-Password := '${tokens[$user]}'"
  done
else
  echo "-- Tokens generated by new_hosted_eduroam_tokens.sh on $timestamp"
  for user in "${!tokens[@]}"; do
    echo "INSERT INTO radcheck (username, attribute, op, value) VALUES ('${user}@${REALM}', 'Cleartext-Password', ':=', '${tokens[$user]}');"
  done
fi
